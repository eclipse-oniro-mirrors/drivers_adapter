# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License..

import("//build/ohos.gni")
import("//drivers/adapter/uhdf2/uhdf.gni")

hdf_fwk_path = "//drivers/framework"

template("hdi") {
  lib_client = "lib" + target_name + "_proxy"
  lib_server = "lib" + target_name + "_stub"

  assert(defined(invoker.package), "package are must")
  assert(defined(invoker.sources), "sources are must")
  assert(defined(invoker.language), "language are must")
  assert(defined(invoker.subsystem_name), "subsystem_name are must")
  assert(defined(invoker.part_name), "part_name are must")

  config("hdi_public_config") {
    package = invoker.package
    package_dir = string_replace(package, ".", "/")
    package_root_dir =
        string_replace(rebase_path("${target_gen_dir}"), "$package_dir", "")

    include_dirs = [
      "$hdf_uhdf_path/include/hdi",
      "$hdf_uhdf_path/include/host",
      "$hdf_uhdf_path/ipc/include",
      "$target_gen_dir",
      "$package_root_dir",
    ]
  }

  config("hdi_public_server_config") {
    defines = [ "__HDI_SERVER__" ]
  }

  action("hdi_gen") {
    deps = [ "$hdf_fwk_path/tools/hdi-gen:build_hdi_gen" ]
    script = "/usr/bin/env"
    if (defined(ohos_lite)) {
      script = "//build/lite/run_shell_cmd.py"
    }

    package = invoker.package
    package_dir = string_replace(package, ".", "/")
    outputs_dir =
        string_replace(rebase_path("${target_gen_dir}"), "$package_dir", "")

    sources = invoker.sources
    language = "--gen-" + invoker.language

    get_files_args = [
      "-o",
      invoker.language,
      target_gen_dir,
    ]
    get_files_args += rebase_path(sources)
    outputs = exec_script("$hdf_fwk_path/tools/hdi-gen/build_hdi_files.py",
                          get_files_args,
                          "list lines")

    args = [
      rebase_path(get_path_info("$hdf_fwk_path/tools/hdi-gen/", "out_dir") +
                  "/hdi-gen"),
      "$language",
      "-d",
      "$outputs_dir",
    ]

    if (defined(invoker.module_name)) {
      args += [
        "--module-name",
        invoker.module_name,
      ]
    }

    foreach(idl_file, sources) {
      args += [ "-c" ]
      args += [ rebase_path(idl_file) ]
    }
  }

  ohos_shared_library(lib_client) {
    if (defined(invoker.sources)) {
      hdi_gen = ":hdi_gen"

      get_source_args = [
        "-c",
        invoker.language,
        target_gen_dir,
      ]
      get_source_args += rebase_path(invoker.sources)
      sources = exec_script("$hdf_fwk_path/tools/hdi-gen/build_hdi_files.py",
                            get_source_args,
                            "list lines")

      public_configs = [ ":hdi_public_config" ]

      deps = [
        "$hdf_uhdf_path/hdi:libhdi",
        "$hdi_gen",
        "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
        "//drivers/adapter/uhdf2/utils:libhdf_utils",
        "//utils/native/base:utils",
      ]

      if (is_standard_system) {
        external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
      } else {
        external_deps = [ "hilog:libhilog" ]
      }

      if (invoker.language == "cpp") {
        external_deps += [ "ipc:ipc_core" ]
      }

      subsystem_name = invoker.subsystem_name
      part_name = invoker.part_name
    }
  }

  ohos_shared_library(lib_server) {
    if (defined(invoker.sources)) {
      hdi_gen = ":hdi_gen"

      get_source_args = [
        "-s",
        invoker.language,
        target_gen_dir,
      ]
      get_source_args += rebase_path(invoker.sources)
      sources = exec_script("$hdf_fwk_path/tools/hdi-gen/build_hdi_files.py",
                            get_source_args,
                            "list lines")

      public_configs = [
        ":hdi_public_config",
        ":hdi_public_server_config",
      ]

      deps = [
        "$hdf_uhdf_path/hdi:libhdi",
        "$hdi_gen",
        "//drivers/adapter/uhdf2/ipc:libhdf_ipc_adapter",
        "//drivers/adapter/uhdf2/utils:libhdf_utils",
        "//utils/native/base:utils",
      ]

      if (is_standard_system) {
        external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
      } else {
        external_deps = [ "hilog:libhilog" ]
      }

      if (invoker.language == "cpp") {
        external_deps += [ "ipc:ipc_core" ]
      }

      subsystem_name = invoker.subsystem_name
      part_name = invoker.part_name
    }
  }

  group("$target_name") {
    deps = [
      ":$lib_client",
      ":$lib_server",
    ]
  }
}
